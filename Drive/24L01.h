#ifndef _24L01_H_
#define _24L01_H_
#include "stm32f10x.h"
#include "spi.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//NRF24L01寄存器操作命令
#define READ_REG1       0x00  //读配置寄存器,低5位为寄存器地址
#define WRITE_REG1      0x20  //写配置寄存器,低5位为寄存器地址
#define RD_RX_PLOAD     0x61  //读RX有效数据,1~32字节
#define WR_TX_PLOAD     0xA0  //写TX有效数据,1~32字节
#define FLUSH_TX        0xE1  //清除TX FIFO寄存器.发射模式下用
#define FLUSH_RX        0xE2  //清除RX FIFO寄存器.接收模式下用
#define REUSE_TX_PL     0xE3  //重新使用上一包数据,CE为高,数据包被不断发送.
#define NOP             0xFF  //空操作,读状态寄存器
//寄存器地址
#define CONFIG          0x00  //配置寄存器地址;
//bit0PRIM_RX:1接收模式,0发射模式;
//bit1PWR_UP:电选择;
//bit2:0 1byte 1.2byte;
//bit3:CRC使能;
//bit4:中断MAX_RT(达到最大重发次数中断)使能
//bit5:中断TX_DS 0使能，1关闭;
//bit6:中断RX_DR 0使能，1关闭；
#define EN_AA           0x01  //使能自动应答功能  bit0~5,对应通道0~5
#define EN_RXADDR       0x02  //接收地址允许,bit0~5,对应通道0~5
#define SETUP_AW        0x03  //设置地址宽度(所有数据通道)
//:bit1,0:00,3字节;01,4字节;02,5字节;
#define SETUP_RETR      0x04
//bit3:0 自动重发次数;bit7:4,自动重发延时 250*x+86us
#define RF_CH           0x05  //RF通道,bit6:0,工作通道频率;
#define RF_SETUP        0x06  //RF寄存器;
//bit7: 使能恒载玻发送模式
//bit[5.3] 00:1M 01:2M 10:250K 11:保留
//bit4：保留
//bit[2:0],发射功率 ，111：7db 110：4db 101：3db 011：0db 000：-12db
#define STATUS          0x07  //状态寄存器;
//bit0:TX FIFO满标志;
//bit3:1,接收数据通道号0-5：数据管道0-5，110：不可用 111：rx fifo空;
//bit4,达到最大重发次数中断位，写1清除
//bit5:数据发送完成中断;
//bit6:接收数据有效，写1清除;
#define RSSI            0x09
//bit 0：0小于-60dbm
#define MAX_TX  	0x10  //达到最大发送次数中断
#define TX_OK   	0x20  //TX发送完成中断
#define RX_OK   	0x40  //接收到数据中断
#define OBSERVE_TX      0x08  //发送检测寄存器,bit7:4,数据包丢失计数器;bit3:0,重发计数器
#define CD              0x09  //载波检测寄存器,bit0,载波检测;
/*通道地址*/
#define RX_ADDR_P0      0x0A  //数据通道0接收地址,最大长度5个字节,低字节在前
#define RX_ADDR_P1      0x0B  //数据通道1接收地址,最大长度5个字节,低字节在前
#define RX_ADDR_P2      0x0C  //数据通道2接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P3      0x0D  //数据通道3接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P4      0x0E  //数据通道4接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P5      0x0F  //数据通道5接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;

#define TX_ADDR         0x10  //发送地址(低字节在前),ShockBurstTM模式下,RX_ADDR_P0与此地址相等
#define RX_PW_P0        0x11  //接收数据通道0有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P1        0x12  //接收数据通道1有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P2        0x13  //接收数据通道2有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P3        0x14  //接收数据通道3有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P4        0x15  //接收数据通道4有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P5        0x16  //接收数据通道5有效数据宽度(1~32字节),设置为0则非法
#define FIFO_STATUS     0x17  //FIFO状态寄存器;
//bit0,RX FIFO寄存器空标志 1空0有数据;
//bit1,RX FIFO满标志1满0可写;
//bit2,3,保留
//bit4,TX FIFO空标志 1空0有数据;
//bit5,TX FIFO满标志 1满0可写;
//bit6,1,循环发送上一数据包.0,不循环;
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#define TX_ADR_WIDTH    5   //5字节的地址宽度
#define RX_ADR_WIDTH    5   //5字节的地址宽度
#define TX_PLOAD_WIDTH  32  //20字节的用户数据宽度
#define RX_PLOAD_WIDTH  32  //20字节的用户数据宽度
/************************************************************
 PA12--->IRQ		IN
 PA8---->CE		OUT
 PA11--->CS		OUT
 ************************************************************/
#define CE_CLR GPIO_ResetBits(GPIOA, GPIO_Pin_3)
#define CE_SET GPIO_SetBits(GPIOA, GPIO_Pin_3)
#define CS_CLR GPIO_ResetBits(GPIOA, GPIO_Pin_4)
#define CS_SET GPIO_SetBits(GPIOA, GPIO_Pin_4)

void
NRF24L01_Init(void);
//void NRF24L01R_Init(void);

u8
NRF24L01_Check(void); //检查24L01是否存在

//void Waiting_Mode(void);

void
TX_Mode(void); //配置为发送模式
u8
NRF24L01_TxPacket(u8 *txbuf);
void
RX_Mode(void); //配置为接收模式
u8
NRF24L01_RxPacket(u8 *rxbuf);
#endif
